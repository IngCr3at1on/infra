---
- hosts: nodes
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: kubernetes apt-key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: add kubernetes apt repository
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: 'kubernetes'
      update_cache: yes
  - name: install kubelet and kubadm
    apt:
      pkg:
      - kubelet={{ k8s_version }}
      - kubeadm={{ k8s_version }}
      state: present
- hosts: node1
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: install kubectl
    apt:
      pkg: kubectl={{ k8s_version }}
      state: present
# FIXME: figure out the best way to only do this on the initial run.
# - hosts: nodes
#   become: yes
#   tasks:
#   - name: reboot
#     reboot:
- hosts: node1
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: initialize control plane
    shell: |
      kubeadm init \
      --control-plane-endpoint=k8s.{{ fqdn }} \
      --pod-network-cidr=10.244.0.0/16
      touch ~/.ansible_checks/kube_init
    args:
      creates: ~/.ansible_checks/kube_init
  - name: create .kube directory for user.
    file:
      path: /home/{{ admin }}/.kube
      state: directory
      owner: "{{ admin }}"
      group: "{{ admin }}"
      mode: '0700'
  - name: copy kube config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/{{ admin }}/.kube/config
      owner: "{{ admin }}"
      group: "{{ admin }}"
      mode: '0600'
      remote_src: true
  - name: install pod network
    become: false
    shell: |
      kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      touch ~/.ansible_checks/flannel
    args:
      creates: ~/.ansible_checks/flannel
  # - name: get join commmand
  #   shell: kubeadm token create --print-join-command
  #   register: join_command_raw
  # - name: set join command
  #   set_fact:
  #     join_command: "{{ join_command_raw.stdout_lines[0] }}"
  # - name: copy kube config to controller
  #   become: false
  #   fetch:
  #     src: /home/{{ admin }}/.kube/config
  #     dest: ./admin.kubeconfig
# This did not work? ran manually it did though...
# - hosts: workers
#   become: yes
#   vars_files:
#   - env_variables
#   tasks:
#   - name: joining cluster
#     shell: |
#       "{{ hostvars['node1'].join_command }}"
#       touch ~/.ansible_checks/kube_join
#     args:
#       creates: ~/.ansible_checks/kube_join
